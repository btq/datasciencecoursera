install.packages("rattle")
rattle
library("rattle")
rattle()
quit()
rattle()
install.packages(c("gglot2", "rcurl", "XML"))
install.packages("RCurl")
install.packages("ggplot2")
install.packages("lattice")
install.packages("zoo")
install.packages("rms")
install.packages("multicore")
install.packages("caret")
install.packages("sos")
install.packages("multicore")
install.packages("e1071")
exit
q
quit
install.packages(c("RCurl", "XML"))
install.packages(c("caret", "colorspace", "Hmisc", "plyr", "rattle", "RGtk2", "rms", "zoo"))
install.packages("ggplot2")
install.packages("rattle")
exit
quit
quit()
install.packages(c("caret", "ggplot2", "rattle"))
install.packages(c("glmnet", "randomForest"))
install.packages("lattice")
install.packages("bootstrap")
q()
install.packages(c("bootstrap", "caret", "caTools", "digest", "foreach", "gdata", "ggplot2", "gplots", "gtools", "Hmisc", "iterators", "lattice", "rattle", "RGtk2", "rms", "scales", "sos", "stringr"))
install.packages(c("e1071", "gdata", "ggplot2", "munsell", "rattle"))
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x,y)
size(rbind(x,y))
a <- 4L in R
a <- 4L
a
x <- list(2, "a", "b", TRUE)
x[[2]]
b <- x[[2]]
print(b)
x <- 1:4
y <- 2
x+y
x
x <- c(3, 5, 1, 10, 12, 6)
x
x[x < 6] <- 0
x
library("class")
library("foreign")
library("lattice")
install.packages("rattle")
exit
quit()
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("fPortfolio")
install.packages("PerformanceAnalytics")
install.packages("TSA")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
detach("package:rattle", unload=TRUE)
install.packages("rattle")
library("rattle", lib.loc="C:/Users/btq/Documents/R/win-library/2.15")
install.packages("RandForestGUI")
quit(
quit()
)
install.packages(c("akima", "xts"))
quit()
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "nlme", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "robustbase", "rpart", "sandwich", "slam", "sn", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "nlme", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "robustbase", "rpart", "sandwich", "slam", "sn", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
))
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "nlme", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "robustbase", "rpart", "sandwich", "slam", "sn", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "nlme", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "robustbase", "rpart", "sandwich", "slam", "sn", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "mvtnorm", "nlme", "party", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "Rglpk", "robustbase", "rpart", "sandwich", "slam", "sn", "stabledist", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan", "xts", "zoo"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
))
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "mvtnorm", "nlme", "party", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "Rglpk", "robustbase", "rpart", "sandwich", "slam", "sn", "stabledist", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan", "xts", "zoo"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
))
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "mvtnorm", "nlme", "party", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "Rglpk", "robustbase", "rpart", "sandwich", "slam", "sn", "stabledist", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan", "xts", "zoo"))
install.packages("nlme")
install.packages(c("nlme", "rattle"))
install.packages(c("akima", "car", "clusterSim", "coin", "colorspace", "Hmisc", "lattice", "Matrix", "modeltools", "mvtnorm", "nlme", "party", "rgl", "Rglpk", "robustbase", "rpart", "sandwich", "slam", "vcd", "vegan", "xts"))
install.packages("swirl")
library("swirl")
swirl()
swirl()
exit
quit()
library("swirl")
swirl()
nxt()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
20
exit
exit()
quit()
install.packages("KernSmooth")
source("http://bioconductor.org/biocLite.R")
install.packages(c("evaluate", "plotrix", "swirl", "testthat"))
load(KernSmooth)
library(KernSmooth)
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "btq")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep = " ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <-rep(NA,1000)
myData <- sample(c(y,z),100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(data=1:20,nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(myData) <- cnames
myData
exit
exit()
quit()
install.packages(c("evaluate", "gsubfn", "httr", "plotrix", "Rcpp", "RCurl", "reshape2", "swirl", "xlsx", "xlsxjars", "yaml"))
source("http://www.openintro.org/stat/data/cdc.R")
names(cdc)
summary(cdc)
table(cdc$genhlth)/20000
gender_smokers = table(cdc$gender, cdc$smoke100)
mosaicplot(gender_smokers)
mosaidplot(gender_smokers)
mosaicplot(gender_smokers)
under23_and_smoke = subset(cdc, cdc$age < 23 & cdc$smoke100 == 1)
summary(under23_and_smoke)
bmi = (cdc$weight/cdc$height^2)*703
boxplot(bmi ~ cdc$genhlth)
boxplot(bmi ~ cdc$genhlth)
names(cdc)
plot(cdc$weight ~ cdc$wtdesire)
setwd("D:/GitHub/datasciencecoursera//rprogramming//quiz1")
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x<-1:4
y<-2:3
x+y
data <- read.csv("hw1_data.csv")
names(data)
sum(is.na(data$Ozone))
mean(data$Ozone,na.rm = TRUE)
mean(data$Temp[data$Month==6],na.rm=TRUE)
mean(data$Solar.R[data$Ozone > 31 & data$Temp > 90],na.rm=TRUE)
max(data$Ozone[data$Month == 5],na.rm=TRUE)
head(data)
summary(data)
size(data)
dataa
data
data$Ozone[47]
sum(is.na(data$Ozone))
mean(data$Ozone,na.rm = TRUE)
mean(data$Solar.R[data$Ozone > 31 & data$Temp > 90],na.rm=TRUE)
mean(data$Temp[data$Month==6],na.rm=TRUE)
max(data$Ozone[data$Month == 5],na.rm=TRUE)
setwd("D:/GitHub/datasciencecoursera/getcleandata/quiz1/")
data <- read.csv("getdata_data_ss06hid.csv")
sum(data$VAL[!is.na(data$VAL)] == 24)
library(xlsx)
dat <- read.xlsx("getdata_data_DATA.gov_NGAP.xlsx",sheetIndex = 1,colIndex=7:15,rowIndex=18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
doc <- xmlTreeParse("getdata_data_restaurants.xml",useInternal=TRUE)
rootNode <- xmlRoot(doc)
zipDat <- xpathSApply(rootNode,"//zipcode",xmlValue)
sum(zipDat == "21231",rm.na=TRUE)
sum(zipDat[!is.na(zipDat)] == 21231)
library(data.table)
DT <- fread("getdata_data_ss06pid.csv")
DT[,mean(pwgtp15),by=SEX]
(5184-6675.5)/4075
setwd("D:/GitHub/datasciencecoursera/getcleandata/quiz2/")
#How many characters are in the 10th, 20th, 30th and 100th lines of HTML from this page:
fileUrl = "http://biostat.jhsph.edu/~jleek/contact.html"
download.file(fileUrl, destfile="./contact.html")
sum(nchar(readLines("contact.html",n=10)[10]))
sum(nchar(readLines("contact.html",n=20)[20]))
sum(nchar(readLines("contact.html",n=30)[30]))
sum(nchar(readLines("contact.html",n=100)[100]))
fileName = "getdata_wksst8110.for"
sstDat <- read.fwf(fileName,widths=c(9,8,8,8,8),skip=4)
sstDat
sstDat[:,4]
summary(sstDat)
sum(sstDat$V4)
26 * 1258
cube <- function(x,n) { x^3}
cube(3)
x<-1:10
if(x > 5) { x<-0 }
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
