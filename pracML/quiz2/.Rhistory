exit
q
quit
install.packages(c("RCurl", "XML"))
install.packages(c("caret", "colorspace", "Hmisc", "plyr", "rattle", "RGtk2", "rms", "zoo"))
install.packages("ggplot2")
install.packages("rattle")
exit
quit
quit()
install.packages(c("caret", "ggplot2", "rattle"))
install.packages(c("glmnet", "randomForest"))
install.packages("lattice")
install.packages("bootstrap")
q()
install.packages(c("bootstrap", "caret", "caTools", "digest", "foreach", "gdata", "ggplot2", "gplots", "gtools", "Hmisc", "iterators", "lattice", "rattle", "RGtk2", "rms", "scales", "sos", "stringr"))
install.packages(c("e1071", "gdata", "ggplot2", "munsell", "rattle"))
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x,y)
size(rbind(x,y))
a <- 4L in R
a <- 4L
a
x <- list(2, "a", "b", TRUE)
x[[2]]
b <- x[[2]]
print(b)
x <- 1:4
y <- 2
x+y
x
x <- c(3, 5, 1, 10, 12, 6)
x
x[x < 6] <- 0
x
library("class")
library("foreign")
library("lattice")
install.packages("rattle")
exit
quit()
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("fPortfolio")
install.packages("PerformanceAnalytics")
install.packages("TSA")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages("rattle")
detach("package:rattle", unload=TRUE)
install.packages("rattle")
library("rattle", lib.loc="C:/Users/btq/Documents/R/win-library/2.15")
install.packages("RandForestGUI")
quit(
quit()
)
install.packages(c("akima", "xts"))
quit()
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "nlme", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "robustbase", "rpart", "sandwich", "slam", "sn", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "nlme", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "robustbase", "rpart", "sandwich", "slam", "sn", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
))
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "nlme", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "robustbase", "rpart", "sandwich", "slam", "sn", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "nlme", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "robustbase", "rpart", "sandwich", "slam", "sn", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "mvtnorm", "nlme", "party", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "Rglpk", "robustbase", "rpart", "sandwich", "slam", "sn", "stabledist", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan", "xts", "zoo"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
))
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "mvtnorm", "nlme", "party", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "Rglpk", "robustbase", "rpart", "sandwich", "slam", "sn", "stabledist", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan", "xts", "zoo"))
install.packages(c("ade4", "akima", "car", "coin", "colorspace",
))
install.packages(c("ade4", "akima", "car", "coin", "colorspace", "fBasics", "fCopulae", "foreign", "Hmisc", "lattice", "locfit", "Matrix", "mvtnorm", "nlme", "party", "PerformanceAnalytics", "quadprog", "R2HTML", "rattle", "rgl", "Rglpk", "robustbase", "rpart", "sandwich", "slam", "sn", "stabledist", "survival", "tcltk2", "timeDate", "timeSeries", "tseries", "vegan", "xts", "zoo"))
install.packages("nlme")
install.packages(c("nlme", "rattle"))
install.packages(c("akima", "car", "clusterSim", "coin", "colorspace", "Hmisc", "lattice", "Matrix", "modeltools", "mvtnorm", "nlme", "party", "rgl", "Rglpk", "robustbase", "rpart", "sandwich", "slam", "vcd", "vegan", "xts"))
install.packages("swirl")
library("swirl")
swirl()
swirl()
exit
quit()
library("swirl")
swirl()
nxt()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
20
exit
exit()
quit()
install.packages("KernSmooth")
source("http://bioconductor.org/biocLite.R")
install.packages(c("evaluate", "plotrix", "swirl", "testthat"))
load(KernSmooth)
library(KernSmooth)
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "btq")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep = " ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <-rep(NA,1000)
myData <- sample(c(y,z),100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(data=1:20,nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(myData) <- cnames
myData
exit
exit()
quit()
install.packages(c("evaluate", "gsubfn", "httr", "plotrix", "Rcpp", "RCurl", "reshape2", "swirl", "xlsx", "xlsxjars", "yaml"))
source("http://www.openintro.org/stat/data/cdc.R")
names(cdc)
summary(cdc)
table(cdc$genhlth)/20000
gender_smokers = table(cdc$gender, cdc$smoke100)
mosaicplot(gender_smokers)
mosaidplot(gender_smokers)
mosaicplot(gender_smokers)
under23_and_smoke = subset(cdc, cdc$age < 23 & cdc$smoke100 == 1)
summary(under23_and_smoke)
bmi = (cdc$weight/cdc$height^2)*703
boxplot(bmi ~ cdc$genhlth)
boxplot(bmi ~ cdc$genhlth)
names(cdc)
plot(cdc$weight ~ cdc$wtdesire)
setwd("D:/GitHub/datasciencecoursera/getcleandata/quiz1/")
setwd("D:/GitHub/datasciencecoursera/rprogramming/pa1/")
source("rprog_scripts_submitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
R.version.string
install.packages(c("data.table", "DBI", "httr", "jsonlite", "KernSmooth", "Rcpp"))
library(swirl)
swirl()
num_vert = c(0.5,55,-10,6)
num_vect = c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name = c(my_char,"B")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paset(1:3,c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="_")
paste(LETTERS,1:4,sep="-")
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo
| = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matri
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Biil","Gina","Kelly","Sean")
patients <- c("Bilkl","Gina","Kelly","Sean")
patients <- c("Bil","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(caret);library(kernlab);data(spam)
install(kernlab)
install.packages(kernlab)
install.packages("kernlab"")
""
install.packages("kernlab")
library(caret);library(kernlab);data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <-spam[inTrain,]
testing <-spam[-inTrain,]
modelFit <- train(type ~.,data=training, method="glm")
type
args(train.default)
install.packages("e1071")
modelFit <- train(type ~.,data=training, method="glm")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
library(Hmisc)
?cut2
summary(concrete)
?ggplot2
library(ggplot2)
?ggplot2
?featurePlot
ggplot2
?ggplot2
?ggplot
ggplot(concrete,aes(x=1:1030,y=CompressiveStrength)))
ggplot(concrete,aes(x=1:1030,y=CompressiveStrength))
ggplot(concrete,aes(x=FlyAsh,y=CompressiveStrength))
ggplot(concrete,aes(x=FlyAsh,y=CompressiveStrength)) + geom_line()
ggplot(concrete,aes(x=FlyAsh,y=CompressiveStrength)) + geom_line() + geom_point()
ggplot(concrete,aes(x=1:1030,y=CompressiveStrength)) + geom_line() + geom_point()
ggplot(training,aes(x=1:774,y=CompressiveStrength)) + geom_line() + geom_point()
ggplot(training,aes(x=1:774,y=Age)) + geom_line() + geom_point()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?hist
hist(training$SuperPlasticizer,plot=TRUE)
training
summary(training)
hist(training$Superplasticizer,plot=TRUE)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
summary(training&IL
)
summary(training&IL?)
grep("^IL",names(training))
ILdat = training(,grep("^IL",names(training)))
ILdat = training[],grep("^IL",names(training))]
ILdat = training[,grep("^IL",names(training))]
ILdat
names(ILdat)
?preProcess
preProcess(ILdat,method="pca",thresh=.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
?train
train(x=ILDat,y=training$diagnosis,method="glm")
train(x=ILdat,y=training$diagnosis,method="glm")
train(x=ILdat,y=training$diagnosis,method="glm",preProcess=c("pca",.8))
train(x=ILdat,y=training$diagnosis,method="glm",preProcess=c("pca",".8))
""
"
train(x=ILdat,y=training$diagnosis,method="glm",preProcess=c("pca",".8"))
train(x=ILdat,y=training$diagnosis,method="glm",preProcess="pca",thresh=.8)
preObj<-preProcess(ILdat,method="pca",thresh=.8)
train(x=preObj,y=training$diagnosis,method="glm")
warnings
warnings()
preObj
train(x=ILdat,y=training$diagnosis,method="glm",preProcess="pca")
train(x=ILdat,y=training$diagnosis,method="glm")
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
A1
A2
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() + theme_bw()
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() + theme_bw()
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() + theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
featurePlot(x = training[, names], y = cutCS, plot = "box")
setcwd('D:/GitHub//datasciencecoursera//pracML//quiz2')
setwd('D:/GitHub//datasciencecoursera//pracML//quiz2')
exit
quit
quit()
